{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","guardarResultado","useEffect","a","async","url","fetch","respuesta","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7310ae17.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                 <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className=\"red darken-4 error\">{mensaje}</p>\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({busqueda, guardarBusqueda, guardarConsultar}) => {\r\n\r\n\r\n    const [error, guardarError] = useState(false);\r\n\r\n    // extraer ciudad y pais\r\n    const { ciudad, pais } = busqueda;\r\n\r\n    // función que coloca los elementos en el state\r\n    const handleChange = e => {\r\n        // actualizar el state\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n\r\n    // Cuando el usuario da submit al form\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(ciudad.trim() === '' || pais.trim() === '') {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        guardarError(false);\r\n\r\n        guardarConsultar(true);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error ? <Error mensaje=\"Ambos campos son obligatorios\" /> : null }\r\n            \r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id=\"ciudad\"\r\n                    value={ciudad}\r\n                    onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"ciudad\">Ciudad: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    name=\"pais\"\r\n                    id=\"pais\"\r\n                    value={pais}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">-- Seleccione un país --</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                </select>\r\n                <label htmlFor=\"pais\">País: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <input  \r\n                    type=\"submit\"\r\n                    value=\"Buscar Clima\"\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n                />\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    busqueda : PropTypes.object.isRequired,\r\n    guardarBusqueda : PropTypes.func.isRequired,\r\n    guardarConsultar : PropTypes.func.isRequired,\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Clima = ({resultado}) => {\r\n\r\n    // extraer los valores\r\n    const { name, main } = resultado;\r\n\r\n    if(!name) return null;\r\n\r\n    // Grados kelvin\r\n    const kelvin = 273.15;\r\n\r\n    return ( \r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\">\r\n                <h2>El clima de {name} es: </h2>\r\n                <p className=\"temperatura\">\r\n                    { parseFloat( main.temp - kelvin, 10 ).toFixed(2) }  <span> &#x2103; </span>\r\n                </p>\r\n                <p>Temperatura Máxima:\r\n                    { parseFloat( main.temp_max - kelvin, 10 ).toFixed(2) }  <span> &#x2103; </span>\r\n                </p>\r\n                <p>Temperatura Minima:\r\n                    { parseFloat( main.temp_min - kelvin, 10 ).toFixed(2) }  <span> &#x2103; </span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport Formulario from './components/Formulario';\r\nimport Clima from './components/Clima';\r\nimport Error from './components/Error';\r\n\r\nfunction App() {\r\n\r\n    // state del formulario\r\n  const [busqueda, guardarBusqueda] = useState({ \r\n      ciudad: '',\r\n      pais: ''\r\n  });\r\n  const [consultar, guardarConsultar] = useState(false);\r\n  const [resultado, guardarResultado] = useState({});\r\n  const [error, guardarError] = useState(false);\r\n\r\n  const { ciudad, pais } = busqueda;\r\n\r\n  useEffect(() => {\r\n    const consultarAPI = async () => {\r\n\r\n        if(consultar) {\r\n          const appId = 'c11a5e2033f0f29d1b7944c7a5563668';\r\n          const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\r\n  \r\n          const respuesta = await fetch(url);\r\n          const resultado = await respuesta.json();\r\n  \r\n          guardarResultado(resultado);\r\n          guardarConsultar(false);\r\n\r\n          // Detecta si hubo resultados correctos en la consulta\r\n\r\n          if(resultado.cod === \"404\") {\r\n              guardarError(true);\r\n          } else {\r\n              guardarError(false);\r\n          }\r\n        }\r\n        \r\n    }\r\n    consultarAPI();\r\n    // eslint-disable-next-line\r\n  },[consultar]);\r\n\r\n  let componente;\r\n  if(error) {\r\n    componente = <Error mensaje=\"No hay resultados\" />\r\n  } else {\r\n    componente = <Clima \r\n                    resultado={resultado}\r\n                />\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n        <Header \r\n          titulo='Clima React App'\r\n        />\r\n\r\n        <div className=\"contenedor-form\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col m6 s12\">\r\n                        <Formulario \r\n                          busqueda={busqueda}\r\n                          guardarBusqueda={guardarBusqueda}\r\n                          guardarConsultar={guardarConsultar}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col m6 s12\">\r\n                        {componente}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}